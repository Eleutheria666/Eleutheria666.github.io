<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>C&#43;&#43; Primer on momo blog</title>
    <link>http://localhost:1313/categories/c&#43;&#43;-primer/</link>
    <description>Recent content in C&#43;&#43; Primer on momo blog</description>
    <image>
      <title>momo blog</title>
      <url>http://localhost:1313/images/papermod-cover.png</url>
      <link>http://localhost:1313/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.133.0</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/c++-primer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Chapter 4. Expressions</title>
      <link>http://localhost:1313/posts/c&#43;&#43;-primer/ch04/</link>
      <pubDate>Wed, 28 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;-primer/ch04/</guid>
      <description>4.2 算术运算符 算术运算符包含以下3种类型，按优先级从高到低排序：
+、- ：一元正号与一元负号 *、/、% ：乘法、除法、求余 +、- ：加法、减法 当算数操作符是布尔类型时，会将布尔变量转化为int类型进行运算（true为1，false为0）。当算数操作符运算的数字结果赋值给布尔变量时，会将算术类型转化为布尔类型（0为false，其他为true）
除法运算如果两个操作数均为整数，结果是向零舍入
求余运算符的运算对象必须是整数，运算结果始终与被除数符号相同
编译器和运行期间没有对运算溢出错误的警告，当发生溢出时，会产生不可预知的行为。
4.3 逻辑关系运算符 逻辑运算符：！、&amp;amp;&amp;amp;、||。逻辑运算符的作用对象必须是能转换成布尔值的类型 关系运算符：&amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;=, !=, == ：大于小于的优先级高于等于和不等于 以下值转化为布尔类型的结果为false：
算术类型：int num = 0
指针类型：int *p = 0
字符类型：char ch = &#39;\0&#39;
以算数值作为if判断条件：直接用，不要与布尔值做比较
布尔字面量true和false只适用于和布尔变量进行比较
1 2 if(a); //正确 if(a == true); //错误：会将 true 先转换为 int 再比较，比较结果是不相等 4.5 递增递减运算符 前置版本++i：首先将运算对象加 1，然后将改变后的对象作为求值结果，返回对象本身作为左值
后置版本i++：也是将运算对象加 1，但结果是运算对象改变之前那个值的副本，返回将对象原始值的副本
如无必要，不要使用后置版本：前置版本直接返回改变了的运算对象，后置版本需要将原始值保存下来以便于返回，是一种浪费。后置版本对于整数和指针来说影响不大，对于迭代器而言消耗巨大。
提倡一种写法：*p++：
由于递增运算符优先级高于解引用，所以先进行递增运算：先将p值加一，然后返回p的初始值的副本作为求值结果用于解引用
1 2 3 auto pbeg = v.begin(); while(pbeg != v.end()) cout &amp;lt;&amp;lt; *pbeg++ &amp;lt;&amp;lt; endl; 练习 *beg作为左值时已经+1</description>
    </item>
    <item>
      <title>Chapter 4. Expressions</title>
      <link>http://localhost:1313/posts/c&#43;&#43;-primer/ch05/</link>
      <pubDate>Wed, 28 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;-primer/ch05/</guid>
      <description></description>
    </item>
    <item>
      <title>Chapter 4. Expressions</title>
      <link>http://localhost:1313/posts/c&#43;&#43;-primer/ch06/</link>
      <pubDate>Wed, 28 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;-primer/ch06/</guid>
      <description></description>
    </item>
    <item>
      <title>Chapter 3. Strings, Vectors, and Arrays</title>
      <link>http://localhost:1313/posts/c&#43;&#43;-primer/ch03/</link>
      <pubDate>Tue, 27 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;-primer/ch03/</guid>
      <description>3.1 String 使用字符串字面值或字符数组初始化 string 对象时，string 不包含末尾的空字符。
3.1.1 输入输出 cin &amp;gt;&amp;gt; string
cin自动忽略开头的空白，遇到空白停止读取，返回true 当cin输入错误或到达输入流末尾，返回false 1 2 3 4 5 6 int main() { string word; while (cin &amp;gt;&amp;gt; word) // read until end-of-file cout &amp;lt;&amp;lt; word &amp;lt;&amp;lt; endl; // write each word followed by a new line return 0; } getline(cin, string)
定义在头文件 string 中，以一个 istream 对象和一个 string 对象为输入参数 getline读取输入流直到遇到换行符停止，然后将读入的数据存入 string 对象，适用于读取一行 getline也会读入换行符，但是不将换行符存入 string 对象：若只输入一个换行符，读取的结果为空字符串 getline读取为止 1 2 3 4 5 6 int main() { string line; // read input a line at a time until end-of-file while (getline(cin, line)) cout &amp;lt;&amp;lt; line &amp;lt;&amp;lt; endl; } 3.</description>
    </item>
    <item>
      <title>Chapter 2. Variables and Basic Types</title>
      <link>http://localhost:1313/posts/c&#43;&#43;-primer/ch02/</link>
      <pubDate>Sun, 25 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;-primer/ch02/</guid>
      <description>2.1 内置类型 2.1.1 基本内置类型 C++ 定义了各类型的最小尺寸：bool 未定义、char 8位、short 16位、int 16位、long 32位、long long 64位
类型选择：
明确知晓数值不可能为负时，选用无符号类型
整数运算用 int，数值太大时用 long long，不用 short 和 long
2.1.2 类型转换 1 2 3 4 5 6 bool b = 42; // b is true int i = b; // i has value 1 i = 3.14; // i has value 3 double pi = i; // pi has value 3.0 unsigned char c = -1; // assuming 8-bit chars, c has value 255 signed char c2 = 256; // assuming 8-bit chars, the value of c2 is undefined 几种自动转换情况：</description>
    </item>
  </channel>
</rss>
