<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on momo blog</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on momo blog</description>
    <image>
      <title>momo blog</title>
      <url>http://localhost:1313/images/papermod-cover.png</url>
      <link>http://localhost:1313/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.133.0</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Oct 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>slfj&#43;logback源码解析</title>
      <link>http://localhost:1313/posts/logback/log/</link>
      <pubDate>Fri, 04 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/logback/log/</guid>
      <description>SLF4j是一个日志门面，类似于JDBC，提供Java日志记录的统一接口
Logback是一个日志实现，类似于mysql-connector，实现SLF4j提供的接口以实现日志打印功能。
类似的日志实现还有Log4j、JDK Logging等。但由于这些日志实现实现的不是SLF4j提供的接口，因此需要使用转换器转换至SLF4j的接口
Logback 核心模块主要包括以下部分：
Core：处理日志事件的核心逻辑 Classic：基于 SLF4J 提供的接口实现日志记录功能 Access：用于 Web 应用程序中的 HTTP 访问日志记录 Logger的获取 Java项目中获取Logger示例：
1 2 3 4 5 6 import org.slf4j.Logger; import org.slf4j.LoggerFactory; private static final Logger logger = LoggerFactory.getLogger(Example.class); // Class获取 private static final Logger logger = LoggerFactory.getLogger(&amp;#34;example&amp;#34;); // String获取 logger.info(&amp;#34;This is an info message&amp;#34;); LoggerFactory的创建 首先，通过LoggerFactory.getLogger()获得Logger对象
返回底层日志实现的ILoggerFactory对象，若未初始化，先初始化日志实现的ILoggerFactory 获取特定ILoggerFactory生产的Logger对象 1 2 3 4 5 6 7 8 9 10 11 12 public static Logger getLogger(String name) { ILoggerFactory iLoggerFactory = getILoggerFactory(); // 初始化底层日志实现的ILoggerFactory return iLoggerFactory.</description>
    </item>
    <item>
      <title>compile</title>
      <link>http://localhost:1313/posts/compile/</link>
      <pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/compile/</guid>
      <description>compile</description>
    </item>
    <item>
      <title>C&#43;&#43;八股</title>
      <link>http://localhost:1313/posts/c&#43;&#43;%E5%85%AB%E8%82%A1/</link>
      <pubDate>Mon, 26 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;%E5%85%AB%E8%82%A1/</guid>
      <description>ch03 decltype 是什么，如何使用
如何声明而非定义一个变量
如果指针不初始化会有什么影响
如何在多个文件间共享 const 对象
使用 auto 来定义引用时要注意什么
预处理变量的作用范围是什么
C++属于静态类型语言，静态类型语言的含义是什么？
C++有两种定义类型别名的方式，分别是什么
指针和引用有4点不同，分别是哪些？
const 对象必须怎样
const 对象的作用范围
什么是常量引用，如何声明，是顶层还是底层
常量引用与常量对象、非常量对象的关系。
什么是常量指针，如何声明，是顶层还是底层
常量指针与常量对象、非常量对象的关系。
顶层 const 和底层 const 都是什么，在什么位置
如何区分顶层 const 和底层 const
constexpr 是什么，特点是什么
ch04 左值与右值的不同
左值使用的是对象的身份（在内存中的位置），使用右值使用的是对象的值（内容）。需要右值的地方可以用左值代替，反之不行。
左值对 decltype 的影响
如果 decltype 中的表达式返回的是左值，那么 decltype 得到是一个引用类型。
递增运算符的前置与后置版本
sizeof 运算符的返回值是什么
常见的隐式类型转换的方式
四种显示类型转换是什么
常见的如 int 转换为 double 这样的转换用什么
const_cast 用于什么时候
旧式的两种强制类型转换方式
最长连续序列
最长无重复字母：不固定窗口的移动模板代码
找到字符串中所有字母异位词：固定窗口预先设定，vector直接比较
螺旋矩阵：设定上右下左边界urdl，到边界则改变边界数值（l/u+1,r/d-1），当l&amp;gt;r || u&amp;gt;d退出
旋转矩阵
电话号码的数字组合 vector初始化方式
括号生成 将tmp保存为结果的前提条件：pos==0</description>
    </item>
    <item>
      <title>翻墙</title>
      <link>http://localhost:1313/posts/%E7%BF%BB%E5%A2%99/</link>
      <pubDate>Fri, 23 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E7%BF%BB%E5%A2%99/</guid>
      <description>翻墙硬核科普</description>
    </item>
    <item>
      <title>hugo</title>
      <link>http://localhost:1313/posts/hugo/</link>
      <pubDate>Tue, 20 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/hugo/</guid>
      <description>installation &amp;amp; configuration about hugo</description>
    </item>
  </channel>
</rss>
